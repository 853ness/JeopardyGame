RAW DATA
The literal number 9 is of this data type. (int)
The literal "9" is of this data type. (string)
Of 3, 4 or 5, these are all this data type. (int)
You cannot store PI with this numerical data type. (int)
The name of the data type for storing strings in variables is:
   1. String
   2. string
   3. str
   4. Text
Which of these is an integer?
   1. 1
   2. 1.2
   3. 1.23
   4. 1.234

LOCATION, LOCATION
The horizontal number line in a Cartesian plane coordinate system. (x, y, z, none of these)
These 2 coordinates are used to locate a point in a 2 dimensional Cartesian, or coordinate, system. (x & y)
It's the sum total of the degrees in a circle. (360)
The  origin of the coordinate system is located at this area of the Greenfoot window. (the upper left-hand corner of the screen)
To move to a specific (x, y) location, use this method from the Actor class. (setLocation())
To move an Actor one space to the right use this statement.
   1. setLocation(getX() + 1, getY());
   2. setLocation(getX() + 10, getY() - 1);
   3. setLocation(getX() + 1, getY() - 1);
   4. setLocation(getX(), getY() + 1);
To turn an actor facing straight up (or north), use this statement.
  1. setRotation(270);
  2. setRotation(0);
  3. setRotation("north");
  4. setRotation("up");
To turn an actor 10 degress clockwise, use this statement.
  1. setRotation(getRotation() + 10);
  2. setRotation(getRotation() - 10);
  3. setRotation(+10);
  4. setRotation(-10);

GREENFOOT: THE CLASS (You have to name the class)
All of this is the stage on which your objects act. (World)
This class can load its data from a file and display an image on your screen. (GreenfootImage)
When you want to interact with the system, use this class. (Greenfoot)
This class lives within a class and usually contains another class. (Actor)
Every program includes subclasses of these two classes. (World and Actor)
Your music may be played using this class. (GreenfootSound)
When you want to work with an image to be displayed, work with this class. (GreenfootImage)

AT RANDOM
A numerical sequence where the next number cannot be predicted. (a random number, a sequential number, an ordered number, a psudeo number)
This statement will return a random number between 0 and 10, including the numbers 0 and 10. (Greenfoot.getRandomNumber(11))
When placed in the act() method, this expression will cause an Actor to turn randomly right or left.
  1. turn(Greenfoot.getRandomNumber(91) - 45)
  2. turn(Greenfoot.getRandomNumber(90))
  3. turn(Greenfoot.getRandomNumber(-90))
  4. turn("random")
Use this statement to randomly decide whether to turn or not to turn.
  1. if (Greenfoot.getRandomNumber(100) < 10) { turn(5); }
  2. if (Greenfoot.getRandomNumber(10) < 100) {
  3. turn(Greenfoot.getRandomNumber(-90)); }
This method of solving problems with a random number generator is named after the casino city of Monaco. (Monte Carlo)

RELATIONAL OPERATORS
This test condition says that x is positive. (x > 0)
This test condition says that x is negative. (x < 0)
This test condition says that x is zero. (0 == x, x = 0)
This test condition says that x is not equal to y. (x != y)
This test condition says that x is greater than y plus one. (x > y + 1)
Which of these is NOT one of Java's relational operators? (3.1.5)
   1. >
   2. !=
   3. <=
   4. =>


CONSTRUCTORS
This is the purpose of a constructor. (initialize variables of an object, assign default values to local variables, define the blueprint for a class, change the World)
This keyword is part of the command that calls a constructor. (new, construct, create, call)
How a constructor signature differs from a method signature. (has no return type, has no name, does not use the keyword "public")
Which of these is NOT a difference between a method and a constructor?
   1. Same name as a class
   2. Does not specify a return value
   3. Called automatically when the object is created
   4. All of these are correct
Which of these is a difference between a method and a constructor?
   1. The name is the same as the class name.
   2. The name is the same as the class name, except lower case.
   3. The name cannot start with a number.
   4. The name cannot have spaces.
Which of these is a difference between a method and a constructor?
   1. A constructor cannot have parameters.
   2. A method has a name but a constructor does not.
   3. A method body is enclosed in curly braces but a constructor body is encosed in parenthesis.
   4. A method always has a return type, unlike a constructor.
The keyword used to call the superclass constructor. (super, this, construct, new)

DOCUMENTATION
The file that tells a user all that he or she needs to know to use your program. (a README.TXT file)
When you want ot leave a note in a program for a programmer to read, you write one of these. (a comment)
Do NOT include this in a method comment block.
  1. the local variables
  2. a description of the method's purpose
  3. the parameter names
  4. the return values
When your method has a parameter, use this tag in the comment block. (@param, @author, @note, @parameter)

INHERITANCE
When a class is based on another class it is known as this. (subclass, superclass, friend class, mother class)
When a class is the basis of other class it is known as this. (superclass, subclass)
A subclass inherits this many methods from its superclass. (all of them, some of them, one of them, none of them)
A subclass can access public methods of a superclass. (true)
Methods are inherited only from the immediate superclass and not other ancestors (superclasses of superclasses). (false)
In the class signature of a subclass, the keyword that identifies the superclass is this word.
   1. extends
   2. super
   3. super()
   4. inherits
If the superclass is named Country, a subclass might be called this.
  1. USA
  2. London
  3. Paris
  4. New York
If a superclass is named Dog, a subclass might be called this.
  1. Fido, or some other name for a dog
  2. Cow, or some other name for an animal
  3. Lupus, or some other species name
  4. Love, or some other emotion name

CONTROL FLOW
The default behavior of program code is to execute in this order. (sequentially, randomly, topologically, inadvertently)
To conditionally execute statements when a test condition is true, use a statement with this Java keyword. (if, test, condition, exec)
If the current image displayed is image1, what image is displayed after the following code fragment runs?
  if (getImage() == image1)
  {
      setImage(image2);
  }
  else
  {
      setImage(image1);
  }
The value of "x" after the following code executes is this.\n\nint x = 5;\nif (x > 3) {\n    x = x - 2;\n} else {
    x = x + 2;
}
(1, 3, 5, 7)
The value of "message" after the following code executes is this.
  int temp = 100;
  String message = "";
  if (temp > 80) message = "This porridge is too hot."
  if (temp < 80) message = "This porridge is too cold."
  if (temp == 80) message = "This porridge is just right."
  1. "This porridge is too hot."
  2. "This porridge is too cold."
  3. "This porridge is just right."
  4. None of these
To cause a section of a program to repeat, use this type of statement. (loop, condition, selection, control)  --  ch. 5
This is the name of one of the looping statements. (while, repeat, until, loop) --  ch. 5

METHODS
The first line of a method is called this. (a signature, a body, a block)
The lines of code between the curly braces of a method are called this. (a body, a signature, a block)
A valid method call for a method named, "lookForFlower", is this.
  1. lookForFlower();
  2. void lookForFlower();
  3. lookForFlower(void);
  4. public void lookForFlower();
The number of parameters in the following method signature is this.\n\npublic void myMethod(int a, String b)
(0, 1, 2, 3)
The value returned by calling the following method is this.
public int mySecretNumber() {
    int x = 1;
    return x + 2;
} (1, 2, 3, 4)
Which of these are NOT a valid method name?
  1. flowers4u()
  2. flowers()
  3. 4flowersCall()
  4. flowers2u()
Which of these is not a reason to write methods?

OBJECT ORIENTED
The variables and methods of a program are coded in this construct. (class, object, instance, comment)
This special value means, "no object". (null, none, empty, void)
For a class named Foo, a valid expression for creating a new object is this.
   1. new Foo
   2. Foo()
   3. new() Foo
   4. new Foo()
When you abstract from many instances of an object you write one of these. (class, mega-object, method, template)
The name of the class that contins this code.\n\nprivate Clock clock;\nprivate Alarm alarm;\npublic AlarmClock(Date time) {/* code here */}
  1. Clock
  2. Alarm
  3. AlarmClock
  4. Cannot determine the class name from information given
You can recognize a constructor because it has no return type. The name of a constructor is always the same as the name of the class.
The class name from which you construct ants and other insect objects is also a euphemism for a programming error. (Bug)

------------------------------------



CODE WORDS & PHRASES
API stands for A_____ P_____ I_____. (Application Programming Interface)


A NUMBER DIVIDED
The result of dividing 3/4 is this number.
The result of dividing 4/3 is this number.
The result of dividing 6/8 is this number.
The result of dividing 8/6 is this number.
The result of the operation 3 % 4 is this number. (3, 2, 1, 0)


BUGS & OTHER ERRORS
The common term used to describe a mistake in programming code. (a bug, a cow, a horse, a boo-boo)
To print an error message to a terminal window, use the following statement.
  1. System.out.println("Error message");
  2. print("Error message");
  3. write("Error message");
  4. System.print("Error message");

CHALLENGING QUESTIONS
The following line of code will print to the terminal window: System.out.println(6L); (6, 6L, 60, 304)

TRICKY QUESTIONS
The following code will:\n\n  String default = \"Default text...\"; (not compile)
This is what happens when working with the code:\n\n  String new = \"text\";
  1. not compile
  2. assign the string to a variable called new
  3. issue a warning but still compile
  4. add elegance to your code
  Exp:This is a classic trick question - "new" is a reserved word in Java (used to construct objects). Thus "new" cannot be used for a variable name. Other reserved words that cannot be used as variable name include: class, if, and public.
Which of these is a valid variable name?
   1. int $myVar;
   2. int 2myVar;
   3. int my var;
   4. my-Var;


DATA STORAGE
In the statement:\n y = 2 * x + 3; \n2 & 3 are called constants and the x & y are called this because they can change. (a variable)
A variable in a program stores information in this area of a computer. (main memory, hard drive, processor, source code)
Which of these is not a valid variable name?
   1. int myVar2;
   2. int 2myVar;
   3. int My_VaR;
   4. int _a_very_long_variable_name_that_is_hard_to_read;


ARITHMETIC
Related to the word "increase", it's a small change in a variable. (increment)
The five operators Java provides for arithmetic does not include this one.
  1. Pound sign (#)
  2. Percent sign (%)
  3. Forward slash (/)
  4. Asterisk (*)


OBJECTS FROM CLASSES
The class name from which you construct your object Fido or other pets known as man's best friend. (Dog, Running Wolf, )
The blueprint of a house is like a ... (class, object, drawing)
The house you construct from a blueprint is like a(n) ... (object, class)
The clarinet, violin and guitar are all objects from this class. (Instrument)



PROGRAMMING CLASS
Your program usually has more of these than classes. (objects)
A template is another word to express this programming concept. (class, object)
The first line of a class file is often this. (an import statement, a field, a method)
A class header is the first line of a class, which this is not.
Good design practice says this should always be declared private. (instance variables, methods, classes, objects)

PURE CLASS
To change a class name into a class literal, add a dot followed by this word. (class)
CLASS-IC TOPICS

:QUEST29:1600:When you reduce the details of many objects into one construct through abstraction, you write one of these.
:ANSWER29:T:a class
:ANSWER29:F:a meta-object
:ANSWER29:F:a template
:ANSWER29:F:a variable
:ANSWERORDER29:randomized
:EXPLANATION29:Abstraction reduces and factors out details so that one can focus on a few concepts at a time. When many similar objects are combined through abstration, you write a class.




FIRST CLASS

Parameters
Return types
Statements
PURE JAVA

ENDS WITH THE SAME 2 LETTERS
____ AND ____

Final Jeopardy!

Misc
WORDS BORROWED BY THE INTERNET $1200: It was slang for coffee before it became a programming language that could run on any platform
COMPUTERAMA $500 (Daily Double): This programming language shares its name with an Indonesian island & a strong word for coffee. (Java)
COMPUTERESE $300: A "hot" World Wide Web browser is written in this programming language created by Sun Microsystems. (Java)



        ArrayList<String> cats = new ArrayList<String>(6);
        ArrayList<Question> qList = new ArrayList<Question>(30);

        String qText = "";
        Question question = null;
        String explanation = null;

        cats.add("GREENFOOT: THE CLASS"); // (You have to name the class)

        qText = "All of this is the stage on which your objects act.";
        question = new Question(qText, 200);
        question.addAnswer("World", true);
        question.addAnswer("Actor", false);
        question.addAnswer("Greenfoot", false);
        question.addAnswer("Stage", false);
        question.shuffleAnswers();
        explanation = "When you look at the Greenfoot documentation, ";
        explanation += "you see that World is the world that Actors live in.";
        question.setExplanation(explanation);
        qList.add(question);

Final Jeapordy
1. Make wager
2. Post question
3. Check Answer


For Loop
200 This part of a for loop looks like this int i = 0;
    What is the initialization?
    What is the loop body?
    What is the test condition?
    What is the update statement?
300 Part of the for loop that looks like this i < 15;
    What is the initialization?
    What is the loop body?
    What is the test condition?
    What is the update statement?
