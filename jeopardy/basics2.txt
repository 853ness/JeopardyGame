# Double Round
# Category format = :CATX:Category name, where X is the catgory number.
# Question format = :QUESTX:$:Question test, where X is the question number
#     and $ is the value displayed for the question.
# Questions are linked to categories in groups of 5. For example, questions 1
#     to 5 are in category 1, questions 6 to 10 in category 2, and so on.
# Answer format = :ANSWERX:T/F:Answer text, where X is the question number and
#     T/F is either T (for true) or F (for false). Answers are optional.
# Answer order format = :ANSWERORDER1:randomized to shuffle the answers. Skip
#     this statement if you do not wnat to randomize answers.
# Explanation format = :EXPLANATIONX:Explanation text, where X is the question
#     number. Note that you can force new lines using \n.

:CAT1:CLASSY CONSTRUCTS

:QUEST1:200:This is the primary purpose of a constructor.
:ANSWER1:T:initialize the variables of a new object
:ANSWER1:F:assign default values to local variables
:ANSWER1:F:define the blueprint for a class
:ANSWER1:F:change the World
:ANSWERORDER1:randomized
:EXPLANATION1:The primary purpose of a constructor is to initialize the variables (fields) of a new object. A constructor is the first thing called when a new object is created.

:QUEST2:400:How a constructor signature differs from a method signature.
:ANSWER2:T:has no return type
:ANSWER2:F:has no name
:ANSWER2:F:does not use the keyword "public"
:ANSWER2:F:has no parameters
:ANSWERORDER2:randomized
:EXPLANATION2:Constructors do not have return types because they cannot return a value.

:QUEST3:600:This is the name of all constructors.
:ANSWER3:T:the same as the class name
:ANSWER3:F:the keyword "constructor"
:ANSWER3:F:the keyword "construct"
:ANSWER3:F:the same as method names
:ANSWERORDER3:randomized
:EXPLANATION3:The constructor name is always the same as the class name.

:QUEST4:800:This keyword is part of the command that calls a constructor.
:ANSWER4:T:new
:ANSWER4:F:construct
:ANSWER4:F:create
:ANSWER4:F:call
:ANSWERORDER4:randomized
:EXPLANATION4:Here is an example of calling a constructor of a class named Bug:\n\n    Bug bug = new Bug();\n\nAs you can see, the "new" keyword is part of the command.

:QUEST5:1000:This is the keyword used when calling a superclass constructor from a subclass constructor.
:ANSWER5:T:super
:ANSWER5:F:this
:ANSWER5:F:construct
:ANSWER5:F:call
:ANSWERORDER5:randomized
:EXPLANATION5:We saw an example of calling the superclass constructor in the example from CrabWorld:\n\nsuper(560, 560, 1);

:CAT2:NOTES TO PEOPLE

:QUEST6:200:The file that tells a reader all that he or she needs to know to use your program.
:ANSWER6:T:a README.TXT file
:ANSWER6:F:a NOTE.TXT file
:ANSWER6:F:a READ.THIS file
:ANSWER6:F:an INSTRUCTIONS.TXT file
:ANSWERORDER6:randomized
:EXPLANATION6:The README.TXT file is important because it tells the reader, who does not know anything about your project, all that he or she needs to know to use your program.

:QUEST7:400:This is what you write when you want to leave a note in your source code for a programmer to read.
:ANSWER7:T:a comment
:ANSWER7:F:a variable
:ANSWER7:F:a method
:ANSWER7:F:a sentence
:ANSWERORDER7:randomized
:EXPLANATION7:Computers ignore comments. We write comments to explain our code to programmers, the usual people who read source code.

:QUEST8:600:The documentation you write when you code a new method.
:ANSWER8:T:a method comment block
:ANSWER8:F:a METHOD.TXT file
:ANSWER8:F:a file comment block
:ANSWER8:F:a note block
:ANSWERORDER8:randomized
:EXPLANATION8:Every method should have a comment block that explains the purpose of the method and how to use it.

:QUEST9:800:When your method has a parameter, use this tag in the comment block.
:ANSWER9:T:@param
:ANSWER9:F:@parameter
:ANSWER9:F:@arg
:ANSWER9:F:@note
:ANSWERORDER9:randomized
:EXPLANATION9:Use the @param tag to indicate a parameter description. Use a separate @param tag for every parameter.

:QUEST10:1000:When your method returns a value, use this tag in the comment block.
:ANSWER10:T:@return
:ANSWER10:F:@ret
:ANSWER10:F:@returnValue
:ANSWER10:F:@value
:ANSWERORDER10:randomized
:EXPLANATION10:Use the @return tag to describe the value returned from a method.

:CAT3:INHERITANCE

:QUEST11:200:A class is called this when it inherits from another class.
:ANSWER11:T:a subclass
:ANSWER11:F:a superclass
:ANSWER11:F:a generalized class
:ANSWER11:F:a daughter class
:ANSWERORDER11:randomized
:EXPLANATION11:A subclass inherits instance variables and methods from its superclass.

:QUEST12:400:A class is called this when other classes are derived from it.
:ANSWER12:T:a superclass
:ANSWER12:F:a subclass
:ANSWER12:F:a friend class
:ANSWER12:F:a mother class
:ANSWERORDER12:randomized
:EXPLANATION12:A superclass is a class from which other classes are derived. The superclass mechanism allows for code reusability by encapsulating common features into a superclass. Subclasses can then implement specialized behavior by defining new variables or methods.

:QUEST13:600:A subclass inherits this many public methods from its superclass.
:ANSWER13:T:all of them
:ANSWER13:F:some of them
:ANSWER13:F:one of them
:ANSWER13:F:none of them
:ANSWERORDER13:randomized
:EXPLANATION13:A subclass inherits all the public methods of its superclass.

:QUEST14:800:In the class signature of a subclass, the keyword that preceeds the superclass name is this word.
:ANSWER14:T:extends
:ANSWER14:F:super
:ANSWER14:F:this
:ANSWER14:F:inherits
:ANSWERORDER14:randomized
:EXPLANATION14:The keyword "extends" identifies the superclass. For example:\n\n    public class Bug extends Actor\n\nAs you can see, the keyword "extends" precedes the name of the superclass, "Actor".

:QUEST15:1000:If a superclass is named Dog, a subclass might be called this.
:ANSWER15:T:Fido, or some other name for a dog
:ANSWER15:F:Cow, or some other name for an animal
:ANSWER15:F:Lupus, or some other species name
:ANSWER15:F:Love, or some other emotion name
:ANSWERORDER15:randomized
:EXPLANATION15:Inheritance is an "is-a" relationship. Fido "is a" dog but a cow is not a dog. Similarly, a species name is not a dog nor is the name of an emotion.

:CAT4:CONTROL FLOW

:QUEST16:200:The default behavior of program code is to execute in this order.
:ANSWER16:T:sequentially
:ANSWER16:F:randomly
:ANSWER16:F:topologically
:ANSWER16:F:inadvertently
:ANSWERORDER16:randomized
:EXPLANATION16:Program code executes in sequential order (one statement after another) unless the order is changed with a control-flow statement or a method call.

:QUEST17:400:To conditionally execute statements, use a statement with this Java keyword.
:ANSWER17:T:if
:ANSWER17:F:test
:ANSWER17:F:condition
:ANSWER17:F:exec
:ANSWERORDER17:randomized
:EXPLANATION17:To conditionally execute code, use an if-statement.

:QUEST18:600:The value of "message" after the following code executes is this.\n\nint temp = 100;\nString message = "None of these";\nif (temp > 80) message = "This porridge is too hot.";\nif (temp < 80) message = "This porridge is too cold.";\nif (temp == 80) message = "This porridge is just right.";
:ANSWER18:T:"This porridge is too hot."
:ANSWER18:F:"This porridge is too cold."
:ANSWER18:F:"This porridge is just right."
:ANSWER18:F:"None of these"
:ANSWERORDER18:randomized
:EXPLANATION18:Since temp = 100, the first test condition (temp > 80) is true and message = "This porridge is too hot." None of the other test conditions are true and in the end "message" contains, "This porridge is too hot."

:QUEST19:800:The value of "x" after the following code executes is this.\n\nint x = 5;\nif (x > 3) {\n    x = x - 2;\n} else {\n    x = x + 2;\n}
:ANSWER19:F:1
:ANSWER19:T:3
:ANSWER19:F:5
:ANSWER19:F:7
#:ANSWERORDER19:randomized
:EXPLANATION19:Since x = 5 at the start, the code in the if-clause executes but not the code in the else clause. Thus, 2 is subtracted from x and by the end of the code the value of x is 3.

:QUEST20:1000:If the current image set is image1, the image set after after the following code runs is this.\n\nif (getImage() == image1) {\n    setImage(image2);\n} else {\n    setImage(image1);
:ANSWER20:T:image2
:ANSWER20:F:image1
:ANSWER20:F:both image1 and image2
:ANSWER20:F:neither image1 nor image2
:ANSWERORDER20:randomized
:EXPLANATION20:The code alternates between the two images. Since the code starts by displaying images1, it finishes by displaying image2.

:CAT5:METHODS

:QUEST21:200:The first line of a method is called this.
:ANSWER21:T:the signature
:ANSWER21:F:the body
:ANSWER21:F:the block
:ANSWER21:F:the first name
:ANSWERORDER21:randomized
:EXPLANATION21:The first line of a method is known as its signature.

:QUEST22:400:The lines of code between the curly braces of a method are called this.
:ANSWER22:T:the body
:ANSWER22:F:the signature
:ANSWER22:F:the block
:ANSWER22:F:the brace-code
:ANSWERORDER22:randomized
:EXPLANATION22:The lines of code between the curly braces of a method are called the body.

:QUEST23:600:A valid call for a method named, "lookForFlower", is this.
:ANSWER23:T:lookForFlower();
:ANSWER23:F:void lookForFlower();
:ANSWER23:F:lookForFlower(void);
:ANSWER23:F:public void lookForFlower();
:ANSWERORDER23:randomized
:EXPLANATION23:Method calls do NOT include keywords like "public" or "void".

:QUEST24:800:The number of parameters in the following method signature is this.\n\n    public void myMethod(int a, String b)
:ANSWER24:F:0
:ANSWER24:F:1
:ANSWER24:T:2
:ANSWER24:F:3
#:ANSWERORDER24:randomized
:EXPLANATION24:For the method signature:\n\n    public void myMethod(int a, String b)\n\nThere are two parameters in the parenthesis separated by a comma.

:QUEST25:1000:The value returned by calling the following method is this.\n\npublic int mySecretNumber() {\n    int x = 1;\n    return x + 2;\n}
:ANSWER25:F:0
:ANSWER25:F:1
:ANSWER25:F:2
:ANSWER25:T:3
#:ANSWERORDER25:randomized
:EXPLANATION25:In the method:\n\npublic int mySecretNumber() {\n    int x = 1;\n    return x + 2;\n}\nvariable x starts with a value of 1 and has 2 added in the next statement. Since 1 + 2 is 3, the value 3 is returned.

:CAT6:OBJECT ORIENTED

:QUEST26:200:The variables and methods of a program are coded in this construct.
:ANSWER26:T:a class
:ANSWER26:F:an object
:ANSWER26:F:an instance
:ANSWER26:F:a comment
:ANSWERORDER26:randomized
:EXPLANATION26:The variables and methods of a program are coded in a class.

:QUEST27:400:This special value means, "no object".
:ANSWER27:T:null
:ANSWER27:F:none
:ANSWER27:F:empty
:ANSWER27:F:void
:ANSWERORDER27:randomized
:EXPLANATION27:The keyword "null" means "no object".

:QUEST28:600:For a class named Foo, a valid expression for creating a new object is this.
:ANSWER28:T:new Foo()
:ANSWER28:F:Foo()
:ANSWER28:F:Foo new()
:ANSWER28:F:new Foo
:ANSWERORDER28:randomized
:EXPLANATION28:The correct syntax is: new Foo()

:QUEST29:800:The class name from which you construct ants and other insect objects is also a euphemism for a programming error.
:ANSWER29:T:a Bug
:ANSWER29:F:a Spider
:ANSWER29:F:a Pest
:ANSWER29:F:an Error
:ANSWERORDER29:randomized
:EXPLANATION29:Software errors are know euphemistically as "bugs".

:QUEST30:1000:The name of the class that contains this code.\n\nprivate Clock clock;\nprivate Alarm alarm;\npublic AlarmClock(Date time) {/* statements here */}
:ANSWER30:T:AlarmClock
:ANSWER30:F:Alarm
:ANSWER30:F:Clock
:ANSWER30:F:Cannot determine class name from information given
:ANSWERORDER30:randomized
:EXPLANATION30:Notice the code:\n\n    public AlarmClock(Date time) {/* statements here */}\n\nYou can tell this is a constructor because it has no return type. The name of a constructor is always the same as the name of the class.

# Final round

:CAT7:TRICKY QUESTIONS

:QUEST31:100:This is what happens when working with the code:\n\n  String new = "text";
:ANSWER31:T:not compile
:ANSWER31:F:assign the string to a variable named new
:ANSWER31:F:issue a warning but still compile
:ANSWER31:F:assign "text", with the quote marks, to variable new
:ANSWERORDER31:randomized
:EXPLANATION31:This is a classic trick question - "new" is a reserved word in Java (used to construct objects). Thus "new" cannot be used for a variable name. Other reserved words that cannot be used as a variable name include: class, if, and public.
