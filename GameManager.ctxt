#BlueJ class context
comment0.target=GameManager
comment0.text=\n\ Manages\ the\ operation\ of\ the\ game.\n\n\ @author\ Ed\ Parrish\n\ @version\ 2.0\ \ 01/22/18\n\ @note\ For\ Jeopardy\ questions\ see\:\ http\://www.j-archive.com/\n
comment1.params=
comment1.target=GameManager()
comment1.text=\n\ Constructor\ for\ objects\ of\ class\ GameManager.\n
comment10.params=
comment10.target=void\ startTimer()
comment10.text=\n\ Start\ the\ timer.\n
comment11.params=
comment11.target=void\ stopTimer()
comment11.text=\n\ Stop\ the\ timer.\n
comment12.params=
comment12.target=void\ act()
comment12.text=\n\ Used\ for\ board\ fill\n
comment13.params=
comment13.target=void\ addQuestionToBoard()
comment13.text=\n\ Add\ a\ single\ question\ to\ the\ game\ board\n
comment14.params=
comment14.target=void\ makeBoard()
comment14.text=\n\ Make\ the\ game\ board.\n
comment15.params=
comment15.target=void\ startGame()
comment15.text=\n\ Start\ the\ game.\n
comment16.params=
comment16.target=void\ startRound()
comment16.text=\n\ Start\ a\ round.\n
comment17.params=questionNum
comment17.target=void\ showQuestion(int)
comment17.text=\n\ Show\ the\ specified\ question.\n\n\ @param\ questionNum\ The\ question\ number\ to\ show.\n
comment18.params=correct
comment18.target=void\ answerResponse(boolean)
comment18.text=\n\ Records\ an\ answer\ and\ advances.\n\n\ @param\ correct\ Set\ <code>true</code>\ if\ the\ answer\ was\ right;\ other\ set\n\ <code>false</code>.\n
comment19.params=
comment19.target=void\ selfResponse()
comment19.text=\n\ Advances\ to\ the\ response\ screen\ when\ user\ is\ deciding\ if\ the\ answer\n\ is\ right\ or\ wrong.\n
comment2.params=b
comment2.target=void\ setProvideChoices(boolean)
comment2.text=\n\ Set\ whether\ to\ provide\ choices\ for\ questions.\n\n\ @param\ b\ Set\ <code>true</code>\ to\ provide\ choices;\ otherwise\ set\ to\n\ \ \ \ \ \ \ \ <code>false</code>.\n
comment20.params=correct
comment20.target=void\ answerSelf(boolean)
comment20.text=\n\ Records\ the\ user\ evaluation\ of\ an\ answer\ and\ advances.\n\n\ @param\ correct\ Set\ <code>true</code>\ if\ the\ answer\ was\ right;\ other\ set\n\ <code>false</code>.\n
comment21.params=
comment21.target=void\ timeout()
comment21.text=\n\ Responds\ to\ a\ timeout\ and\ advances.\n
comment22.params=
comment22.target=void\ endQuestion()
comment22.text=\n\ End\ the\ question\ and\ decide\ the\ next\ step.\n
comment23.params=
comment23.target=void\ startFinalRound()
comment23.text=\n\ Method\ startFinalRound\n
comment24.params=bet
comment24.target=void\ finalRound(int)
comment24.text=\n\ Start\ the\ final\ round.\n\n\ @param\ bet\ The\ amount\ of\ the\ bet.\n
comment25.params=
comment25.target=void\ gameOver()
comment25.text=\n\ Display\ the\ game\ over.\n
comment26.params=str\ max
comment26.target=java.lang.String[]\ wordWrap(java.lang.String,\ int)
comment26.text=\n\ Wraps\ a\ single\ string\ into\ an\ array\ of\ strings\ for\ some\ maximum\n\ number\ of\ characters.\ Also\ will\ split\ lines\ on\ newlines\ or\ the\n\ characters\ "\\n"\ allowing\ simple\ manually-placed\ newlines.\n\n\ Changed\ the\ regex,\ dded\ max,\ added\ newline\ split,\ removed\ extra\n\ blank\ line\ at\ end.\n\n\ @see\ http\://joust.kano.net/weblog/archives/000060.html\n
comment27.params=level
comment27.target=void\ loadRound(int)
comment28.params=lines
comment28.target=void\ convertUnicode(java.util.ArrayList)
comment29.params=lines
comment29.target=void\ readCategories(java.util.ArrayList)
comment3.params=
comment3.target=boolean\ getProvideChoices()
comment3.text=\n\ Return\ whether\ choices\ are\ provided\ or\ not.\n\n\ @return\ <code>true</code>\ if\ choices\ are\ provided;\ otherwise\n\ \ \ \ \ \ \ \ \ <code>false</code>.\n
comment30.params=lines
comment30.target=void\ readQuestions(java.util.ArrayList)
comment31.params=lines
comment31.target=void\ readAnswers(java.util.ArrayList)
comment32.params=lines
comment32.target=void\ readAnswerOrder(java.util.ArrayList)
comment33.params=lines
comment33.target=void\ readExplanations(java.util.ArrayList)
comment34.params=arr
comment34.target=void\ write(java.util.ArrayList)
comment4.params=b
comment4.target=void\ setProvideTimer(boolean)
comment4.text=\n\ Set\ whether\ to\ provide\ a\ timer\ or\ not.\n\n\ @param\ b\ Set\ <code>true</code>\ to\ provide\ a\ timer;\ otherwise\ set\ to\n\ \ \ \ \ \ \ \ <code>false</code>.\n
comment5.params=
comment5.target=boolean\ getProvideTimer()
comment5.text=\n\ Return\ whether\ a\ timer\ is\ provided\ or\ not.\n\n\ @return\ <code>true</code>\ if\ a\ timer\ is\ provided;\ otherwise\n\ \ \ \ \ \ \ \ \ <code>false</code>.\n
comment6.params=
comment6.target=int\ getScore()
comment6.text=\n\ Returns\ the\ current\ score.\n\n\ @return\ The\ current\ score.\n
comment7.params=
comment7.target=Question\ getCurrentQuestion()
comment7.text=\n\ Returns\ the\ current\ question.\n\n\ @return\ The\ current\ question.\n
comment8.params=msg
comment8.target=void\ printErrorMessage(java.lang.String)
comment8.text=\n\ Print\ an\ error\ message.\n\n\ @param\ msg\ The\ error\ message.\n
comment9.params=
comment9.target=void\ clearErrorMessage()
comment9.text=\n\ Clear\ the\ error\ message.\n
numComments=35
